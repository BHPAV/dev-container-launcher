# .github/workflows/ci.yml
name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy bandit[toml]
      
      - name: Run Black
        run: black --check .
      
      - name: Run Ruff
        run: ruff check .
      
      - name: Run MyPy
        run: mypy devctl/ agents/
      
      - name: Run Bandit Security Scan
        run: bandit -r devctl/ agents/ -ll

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/testpass
          NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
        ports:
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p testpass 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run unit tests
        run: |
          pytest tests/unit -v --cov=devctl --cov=agents --cov-report=xml
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASS: testpass
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - {dockerfile: "Dockerfile", tag: "devbox:latest"}
          - {dockerfile: "images/python-3.12.Dockerfile", tag: "python-3.12"}
          - {dockerfile: "images/node-20.Dockerfile", tag: "node-20"}
          - {dockerfile: "images/go-1.22.Dockerfile", tag: "go-1.22"}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.image.dockerfile }}
          tags: ${{ matrix.image.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false

  policy-validation:
    name: Validate OPA Policies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/
      
      - name: Install Conftest
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/download/v0.46.0/conftest_0.46.0_Linux_x86_64.tar.gz
          tar xzf conftest_0.46.0_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin
      
      - name: Validate policies
        run: |
          for policy in policies/*.rego; do
            echo "Validating $policy"
            opa fmt --diff $policy
            opa test $policy || true
          done

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: Build test image
        run: |
          echo "test-key" > authorized_keys
          docker build -t devbox:test .
      
      - name: Run integration tests
        run: |
          pytest tests/integration -v
        env:
          DOCKER_HOST: unix:///var/run/docker.sock

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust
      
      - name: Start service
        run: |
          python -m devctl.service &
          sleep 5
      
      - name: Run Locust tests
        run: |
          locust -f tests/performance/locustfile.py \
            --headless \
            -u 50 \
            -r 5 \
            -t 30s \
            --host http://localhost:7070 \
            --html performance-report.html
      
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html

  agent-validation:
    name: Validate Agent Framework
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Test agent imports
        run: |
          python -c "from agents import BaseAgent, PlannerAgent, CoderAgent, TesterAgent"
      
      - name: Run agent unit tests
        run: |
          pytest tests/unit/test_agents.py -v || echo "Agent tests not yet implemented"
